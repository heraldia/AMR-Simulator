Index: src/model/result.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/result.py b/src/model/result.py
deleted file mode 100644
--- a/src/model/result.py	
+++ /dev/null	
@@ -1,3 +0,0 @@
-class result:
-    def __init__(self,task):
-      self.task = task
\ No newline at end of file
Index: src/TestForMutiProcess.py
===================================================================
diff --git a/src/TestForMutiProcess.py b/src/TestForMutiProcess.py
deleted file mode 100644
--- a/src/TestForMutiProcess.py	
+++ /dev/null	
@@ -1,33 +0,0 @@
-import urllib.request
-from multiprocessing.dummy import Pool as ThreadPool
-import requests
-import time
-
-tic=time.perf_counter()
-urls = [
-    'http://www.python.org',
-    'http://www.python.org/about/',
-    'http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html',
-    'http://www.python.org/doc/',
-    'http://www.python.org/download/',
-    'http://www.python.org/getit/',
-    'http://www.python.org/community/',
-    'https://wiki.python.org/moin/',
-    'http://planet.python.org/',
-    'https://wiki.python.org/moin/LocalUserGroups',
-    'http://www.python.org/psf/',
-    'http://docs.python.org/devguide/',
-    'http://www.python.org/community/awards/'
-    # etc..
-    ]
-
-# Make the Pool of workers
-pool = ThreadPool(1)
-# Open the urls in their own threads
-# and return the results
-results = pool.map(urllib.request.urlopen, urls)
-#close the pool and wait for the work to finish
-pool.close()
-pool.join()
-toc=time.perf_counter()
-print(f"time cost: {toc-tic:0.4f} seconds")
